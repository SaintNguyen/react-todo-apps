[{"C:\\Users\\MSI GF63\\Desktop\\React-todo-apps\\src\\index.js":"1","C:\\Users\\MSI GF63\\Desktop\\React-todo-apps\\src\\pages\\Comment.jsx":"2","C:\\Users\\MSI GF63\\Desktop\\React-todo-apps\\src\\modals\\EditTask.js":"3","C:\\Users\\MSI GF63\\Desktop\\React-todo-apps\\src\\pages\\Product.jsx":"4","C:\\Users\\MSI GF63\\Desktop\\React-todo-apps\\src\\pages\\About.jsx":"5","C:\\Users\\MSI GF63\\Desktop\\React-todo-apps\\src\\components\\TodoList.js":"6","C:\\Users\\MSI GF63\\Desktop\\React-todo-apps\\src\\pages\\Analytics.jsx":"7","C:\\Users\\MSI GF63\\Desktop\\React-todo-apps\\src\\reportWebVitals.js":"8"},{"size":500,"mtime":1619253139000,"results":"9","hashOfConfig":"10"},{"size":162,"mtime":1649877227000,"results":"11","hashOfConfig":"10"},{"size":2232,"mtime":1664846499143,"results":"12","hashOfConfig":"10"},{"size":162,"mtime":1666204897911,"results":"13","hashOfConfig":"10"},{"size":2194,"mtime":1666205093977,"results":"14","hashOfConfig":"10"},{"size":2431,"mtime":1666204952326,"results":"15","hashOfConfig":"10"},{"size":168,"mtime":1666204878214,"results":"16","hashOfConfig":"10"},{"size":362,"mtime":1619253139000,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"5kf94d",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\MSI GF63\\Desktop\\React-todo-apps\\src\\index.js",[],["37","38"],"C:\\Users\\MSI GF63\\Desktop\\React-todo-apps\\src\\pages\\Comment.jsx",[],"C:\\Users\\MSI GF63\\Desktop\\React-todo-apps\\src\\modals\\EditTask.js",["39"],"import React, { useState , useEffect} from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\n\nconst EditTaskPopup = ({modal, toggle, updateTask, taskObj}) => {\n    const [taskName, setTaskName] = useState('');\n    const [description, setDescription] = useState('');\n\n    const handleChange = (e) => {\n        \n        const {name, value} = e.target\n\n        if(name === \"taskName\"){\n            setTaskName(value)\n        }else{\n            setDescription(value)\n        }\n\n\n    }\n\n    useEffect(() => {\n        setTaskName(taskObj.Name)\n        setDescription(taskObj.Description)\n    },[])\n\n    const handleUpdate = (e) => {\n        e.preventDefault();\n        let tempObj = {}\n        tempObj['Name'] = taskName\n        tempObj['Description'] = description\n        updateTask(tempObj)\n    }\n\n    return (\n        <Modal isOpen={modal} toggle={toggle}>\n            <ModalHeader style={{\"background-color\": \"#000\"}} toggle={toggle}><h2 className=\"gradient-text\">Update Task</h2></ModalHeader>\n            <ModalBody style={{\"background-color\": \"#000\"}}>\n            \n                    <div className = \"form-group\">\n                        <label className=\"gradient-text\"><h7>Task Name</h7></label>\n                        <input type=\"text\" style={{\"font-family\": \"Archivo Black, sans-serif\", \"font-size\": \"20px\"}} className = \"form-control\" value = {taskName} onChange = {handleChange} name = \"taskName\"/>\n                    </div>\n                    <div className = \"form-group\">\n                        <label className=\"gradient-text\"><h7>Description</h7></label>\n                        <textarea rows = \"5\" style={{\"font-family\": \"Great Vibes, cursive\", \"font-size\": \"22px\"}} className = \"form-control\" value = {description} onChange = {handleChange} name = \"description\"></textarea>\n                    </div>\n                \n            </ModalBody>\n            <ModalFooter>\n            <Button className = \"button-85\" role=\"button\" onClick={handleUpdate}><h6 className=\"gradient-text\">Update</h6></Button>{' '}\n            <Button color=\"secondary\" onClick={toggle}><h6>Cancel</h6></Button>\n            </ModalFooter>\n      </Modal>\n    );\n};\n\nexport default EditTaskPopup;","C:\\Users\\MSI GF63\\Desktop\\React-todo-apps\\src\\pages\\Product.jsx",[],["40","41"],"C:\\Users\\MSI GF63\\Desktop\\React-todo-apps\\src\\pages\\About.jsx",[],"C:\\Users\\MSI GF63\\Desktop\\React-todo-apps\\src\\components\\TodoList.js",["42"],"C:\\Users\\MSI GF63\\Desktop\\React-todo-apps\\src\\pages\\Analytics.jsx",[],"C:\\Users\\MSI GF63\\Desktop\\React-todo-apps\\src\\reportWebVitals.js",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":24,"column":7,"nodeType":"49","endLine":24,"endColumn":9,"suggestions":"50"},{"ruleId":"43","replacedBy":"51"},{"ruleId":"45","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":15,"column":12,"nodeType":"55","messageId":"56","endLine":15,"endColumn":20},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'taskObj.Description' and 'taskObj.Name'. Either include them or remove the dependency array. If 'setTaskName' needs the current value of 'taskObj.Name', you can also switch to useReducer instead of useState and read 'taskObj.Name' in the reducer.","ArrayExpression",["59"],["57"],["58"],"no-unused-vars","'taskList' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"60","fix":"61"},"Update the dependencies array to be: [taskObj.Description, taskObj.Name]",{"range":"62","text":"63"},[628,630],"[taskObj.Description, taskObj.Name]"]